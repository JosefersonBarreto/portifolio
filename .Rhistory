library(ggplot2)
cars
ggplot(cars,aes(x=speed,y=dist))+geom_point(col='red',size=3)
ggplot(cars,aes(x=speed,y=dist))+
geom_point(col='red',size=3)+
theme_bw()+
labs(title = 'grafico de disperção ', caption = 'Joseferson Barreto')
p<-ggplot(cars,aes(x=speed,y=dist))+
geom_point(col='red',size=3)+
theme_bw()+
labs(title = 'grafico de disperção ', caption = 'Joseferson Barreto')
ggsave(p,"plot.png")
ggsave("plot.png")
library(readxl)
library(ggpubr)
install.packages('terra', repos='https://rspatial.r-universe.dev')
meu_mapa <- function(meu_estado){
#Pacotes necessários
#raster, ggplot2,sf,dplyr,rgdal
#Carregando os pacotes
library(raster)  #Para leitura e manipula??o de dados espaciais do tipo raster
library(ggplot2) #Para visualiza??o de dados
library(dplyr,warn.conflicts=FALSE) #para manipula??o de dados
#Leitura de dados
topografia <- raster('dados/topografia.tif')     #Ler os dados de topografia
estados <- sf::read_sf('dados/poly_estados.shp') #Ler os dados dos limites territoriais dos Estados brasileiros
estado <- dplyr::filter(estados,abbrv_s==meu_estado) #Seleciona os dados dos limites territoriais para cada estado
# Verifica existem dados para a sigla do Estado informada
if(nrow(estado)<1) return(paste('A sigla',meu_estado,'n?o ? v?lida',sep = ' '))
#Manipula??o de dados
top.estado <- topografia %>%
crop(estado) %>%  #Recorta os dados para a extens?o do Estado
mask(estado)      #Recorta os dados para os limites do estado
top.estado[top.estado==99999]=NA #Troca 99999 por NA
top.estado.sf <- as.data.frame(top.estado,xy=T) %>%  #Converte raster para data.frame
na.omit() # Remove os NA dos dados
##############################################
##### Visualizando dos dados            ######
##############################################
#Criando paleta de cores
cores <- c('#bcd2a4','#89d2a4','#28a77e','#90b262',
'#ddb747','#fecf5b','#da9248','#b75554',
'#ad7562','#b8a29a','#9f9e98')
p <-  ggplot()+ #Criando a primeira camada do ggplot
geom_tile(data = top.estado.sf,aes(x,y,fill=topografia))+ #Sobrepondo dos dados de topografia
geom_sf(data = estado,fill=NA)+ #Sobrepondo os limites territoriais para os Estados selecionado
scale_fill_gradientn(colours =cores )+ #Ajustando as cores do mapa
labs(x=NULL,y=NULL,fill='[m]')+ #Sobrepondo os pontos
theme_light() #Escolhendo o tema do mapa
print(p)
}
library(ggplot2)
library(ggplot2)
history()
p<-ggplot(cars,aes(x=speed,y=dist))+
geom_point(col='red',size=3)+
theme_bw()+
labs(title = 'grafico de disperção ', caption = 'Joseferson Barreto')
p
source('C:/Users/josef/Documents/evento_aula3/scripts/mapa_relevo.R')
source('C:/Users/josef/Documents/evento_aula3/scripts/mapa_relevo.R')
for (i in c('AL','SP','SC')) {
meu_mapa(i)
ggsave(filename = paste0('figuras/',.i,'.png'))
}
meu_mapa('SP')
#Carregando os pacotes
library(raster)  #Para leitura e manipula??o de dados espaciais do tipo raster
#Leitura de dados
topografia <- raster('C:/Users/josef/Documents/evento_aula3/dados/topografia.tif')     #Ler os dados de topografia
estados <- sf::read_sf('C:/Users/josef/Documents/evento_aula3/dados/poly_estados.shp') #Ler os dados dos limites territoriais dos Estados brasileiros
meu_mapa <- function(meu_estado){
#Pacotes necessários
#raster, ggplot2,sf,dplyr,rgdal
#Carregando os pacotes
library(raster)  #Para leitura e manipula??o de dados espaciais do tipo raster
library(ggplot2) #Para visualiza??o de dados
library(dplyr,warn.conflicts=FALSE) #para manipula??o de dados
#Leitura de dados
topografia <- raster('C:/Users/josef/Documents/evento_aula3/dados/topografia.tif')     #Ler os dados de topografia
estados <- sf::read_sf('C:/Users/josef/Documents/evento_aula3/dados/poly_estados.shp') #Ler os dados dos limites territoriais dos Estados brasileiros
estado <- dplyr::filter(estados,abbrv_s==meu_estado) #Seleciona os dados dos limites territoriais para cada estado
# Verifica existem dados para a sigla do Estado informada
if(nrow(estado)<1) return(paste('A sigla',meu_estado,'n?o ? v?lida',sep = ' '))
#Manipula??o de dados
top.estado <- topografia %>%
crop(estado) %>%  #Recorta os dados para a extens?o do Estado
mask(estado)      #Recorta os dados para os limites do estado
top.estado[top.estado==99999]=NA #Troca 99999 por NA
top.estado.sf <- as.data.frame(top.estado,xy=T) %>%  #Converte raster para data.frame
na.omit() # Remove os NA dos dados
##############################################
##### Visualizando dos dados            ######
##############################################
#Criando paleta de cores
cores <- c('#bcd2a4','#89d2a4','#28a77e','#90b262',
'#ddb747','#fecf5b','#da9248','#b75554',
'#ad7562','#b8a29a','#9f9e98')
p <-  ggplot()+ #Criando a primeira camada do ggplot
geom_tile(data = top.estado.sf,aes(x,y,fill=topografia))+ #Sobrepondo dos dados de topografia
geom_sf(data = estado,fill=NA)+ #Sobrepondo os limites territoriais para os Estados selecionado
scale_fill_gradientn(colours =cores )+ #Ajustando as cores do mapa
labs(x=NULL,y=NULL,fill='[m]')+ #Sobrepondo os pontos
theme_light() #Escolhendo o tema do mapa
print(p)
}
meu_mapa('SP')
for (i in c('AL','SP','SC')) {
meu_mapa(i)
ggsave(filename = paste0('figuras/',.i,'.png'))
}
getwd()
for (i in c('AL','SP','SC')) {
meu_mapa(i)
ggsave(filename = paste0('C:/Users/josef/Documents/evento_aula3/figuras/',.i,'.png'))
}
for (i in c('AL','SP','SC')) {
meu_mapa(i)
ggsave(filename = paste0('C:/Users/josef/Documents/evento_aula3/figuras/',i,'.png'))
}
meu_mapa('SP')
plot(cars)
# Obs.: Serao ocultados os acentos por questao da codificacao
# <>-------------------------------------------------------------
# <>-------------------------------------------------------------
#
# Instalacoes previas necessarias
# install.packages("devtools")
# library(devtools)
# devtools::install_github("tidyverse/rvest")
#
# Lendo o pacote
library(rvest)
# <>-------------------------------------------------------------
# <>-------------------------------------------------------------
# EXEMPLO 1 : SITE JARBAS
#
# 1- LER URL
url <- "https://jarbas.serenata.ai/dashboard/chamber_of_deputies/reimbursement/"
jarbas_webpage <- read_html(url)
# <>----------------------------
# <>----------------------------
# Scraping usando classe css 'field-congressperson_name'
jarbas_names_html <-html_nodes(jarbas_webpage, '.field-congressperson_name')
jarbas_names <- html_text(jarbas_names_html)
head(jarbas_names,3)
#
#SUBQUOTA TRANSLATED
jarbas_subquota_html <-html_nodes(jarbas_webpage, '.field-subquota_translated')
jarbas_subquota <- html_text(jarbas_subquota_html)
head(jarbas_subquota,3)
#
#Fornecedor
jarbas_provider_html <-html_nodes(jarbas_webpage, '.field-supplier_info')
jarbas_provider <- html_text(jarbas_provider_html)
head(jarbas_provider,3)
#
#Valores em Real
jarbas_value_html <-html_nodes(jarbas_webpage, '.field-value')
jarbas_value <- html_text(jarbas_value_html)
head(jarbas_value,3)
#
str(jarbas_value)
# <>----------------------------
# <>----------------------------
# Convertendo em numerico
library(stringr)
#Conversão para tipo numerico
jarbas_value <- as.numeric(sub(",",".",
str_extract(jarbas_value[1:10],pattern = "\\d+,\\d+")))
head(jarbas_value,3)
# <>----------------------------
# <>----------------------------
#Combinando todas as caracteristicas obtidas
#Retirando primeiro nome
# jarbas_names <- str_extract(jarbas_names,pattern = boundary("word"))
#
jarbas_df <- data.frame(
Name = jarbas_names,
Subquota = jarbas_subquota,
Provider = jarbas_provider,
Value = jarbas_value
)
#Mostrando tipo das variaveis
str(jarbas_df)
# <>----------------------------
View(jarbas_df)
# <>----------------------------
# <>----------------------------
# Geracao de um grafico
library(ggplot2)
#
jarbas_df <- jarbas_df#[1:50,]
ggplot(
jarbas_df, aes(Value,Name,colour=Subquota)) +
geom_point() +
labs(title="", x ="Pedidos de reembolso (R$)",
y = "Deputados",colour="SUBQUOTA TRANSLATED")
# <>-------------------------------------------------------------
# <>-------------------------------------------------------------
#EXEMPLO 2: Texto de um WebSite
# 1- LER URL
# -------
# Pacote Necessário para Scraping
library(rvest)
# -------
# URL
url <- "https://brasil.elpais.com/brasil/2021-01-26/todos-os-brasileiros-estao-com-seus-dados-a-venda-e-ha-muito-pouco-o-que-se-pode-fazer-para-se-proteger.html"
# -------
# Lendo a Página
webpage <- read_html(url)
# <>----------------------------
# <>----------------------------
# Passo 2: Extraindo texto de Site
#Scraping  usando classe css ‘p’
names_html <-html_nodes(webpage, 'p')
# -------
# Retirando o texto retornados da classe 'p'
names <- html_text(names_html)
# -------
head(names)
# <>----------------------------
# <>----------------------------
# Passo 3: Preparação dos dados
# Início do código para Nuvem de palavras
library(tm)
# -------
# Colocando as palavras em minusculos
# -------
texto <- tolower(names)
# -------
# Removendo as stopwords
texto <- removeWords(texto, stopwords(kind = "portuguese"))
# -------
# Transformando em formato Corpus
texto <- Corpus(VectorSource(texto),
readerControl = list(reader = reader(VectorSource(texto)),
language = "pt"))
# -------
# Removendo as stopwords de arquivo.txt
# -------
file <- url("https://jodavid.github.io/Slide-Introdu-o-a-Web-Scrapping-com-rvest/stopwords_pt_BR.txt")
stopwords_ptBR <- read.table(file)
stopwords_ptBR <- unlist(stopwords_ptBR, use.names = FALSE)
# -------
# Removendo as stopwords de arquivo.txt
# -------
file <- url("https://jodavid.github.io/Slide-Introdu-o-a-Web-Scrapping-com-rvest/stopwords_pt_BR.txt")
stopwords_ptBR <- read.table(file)
# -------
# Removendo as stopwords de arquivo.txt
# -------
file <- url("https://jodavid.github.io/Slide-Introdu-o-a-Web-Scrapping-com-rvest/stopwords_pt_BR.txt")
stopwords_ptBR <- read.table(file)
